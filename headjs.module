<?php
// $Id$

/**
 * @file
 * Overrides Drupal's standard javascript loading methods to use head.js
 */

// filenames of full & loader-only versions
define('HEADJS_FULL', 'head.min.js');
define('HEADJS_LOADER', 'head.load.min.js');

/**
 * Implementation of hook_theme_registry_alter()
 *
 * Make headjs' page preprocess function run after everything else's,
 * so that a theme can't call drupal_get_js() and mess everything up.
 * Also so that if jQuery Update is present it can work normally
 */
function headjs_theme_registry_alter(&$theme_registry) {
  // make sure preprocess function is only added once
  if ($pos = array_search('headjs_preprocess_page', $theme_registry['page']['preprocess functions'])) {
    unset($theme_registry['page']['preprocess functions'][$pos]);
  }
  
  $theme_registry['page']['preprocess functions'][] = 'headjs_preprocess_page';
}

/**
 * Implements hook_preprocess_page()
 *
 * Replace Drupal's javascript includes with head.js version
 */
function headjs_preprocess_page(&$variables) {
  $headjs_enabled = current(variable_get('headjs_enable', array('enable' => 'enable'))) !== 0;

  // Only replace if setting enabled and page has javascript
  if ($headjs_enabled && !empty($variables['scripts'])) {
    if (isset($variables['scripts_array']) && is_array($variables['scripts_array'])) {
      $scripts = $variables['scripts_array'];
    } else {
      $scripts = drupal_add_js();
    }

    $tempScripts = array();

    // grab list of js includes in the queue
    foreach ($scripts as $category => $cat) {
      foreach ($cat as $script => $data) {
        if (in_array($category, array('core', 'module', 'theme'))) {
          $tempScripts[] = base_path() . (string) $script;
        }
      }
    }

    // Check for js added via drupal_set_html_head()
    // http://drupal.org/node/1029264#comment-3998976
    if (strpos($variables['head'], '<script') !== false) {
      $matches = array();
      preg_match('#<script .+?</script>#s', $variables['head'], $matches);

      foreach ($matches as $match) {
        $variables['head'] = str_replace($match, '', $variables['head']);
        $matches_scriptname = array();
        preg_match('#type="text/javascript" src="(.+?)"#', $match, $matches_scriptname);
        $tempScripts[] = $matches_scriptname[1];
      }
    }

    // decide which head.js to use; the full script or only the loader  
    $headjs_version = variable_get('headjs_version', 'full');
    $head_script = ($headjs_version === 'full') ? HEADJS_FULL : HEADJS_LOADER;

    // clear js includes & add head.js as the only one
    $scripts['theme'] = $scripts['module'] = array();
    $scripts['core'] = array(
      'sites/all/libraries/headjs/dist/' . $head_script => array(
        'cache' => TRUE,
        'defer' => FALSE,
        'preprocess' => FALSE
      )
    );

    // build head.js function call
    // load scripts in parallel but execute in order
    $headjs = 'head.js("' . implode('", "', $tempScripts) . '")';
    
    // Rebuild settings script; this is has to be done because Drupal places
    // settings in a script tag that can get loaded before drupal.js (since its non-blocking)
    // so, in order to make sure it gets executed AFTER drupal.js we add it to the head.ready() callback
    $callback = 'jQuery.extend(Drupal.settings, ' . 
      drupal_to_js(call_user_func_array('array_merge_recursive', $scripts['setting'])) . ");";
    
    // Execute callback on head.ready()
    $headjs .= "\n.ready(function(){" . $callback . "});";
    
    // Make sure head.js is the first inline script but allow other inline scripts to coexist
    array_unshift($scripts['inline'], array('code' => $headjs, 'defer' => FALSE));
    
    // empty settings array
    $scripts['setting'] = array();
    unset($scripts['setting']);
    
    $variables['scripts'] = drupal_get_js('header', $scripts);
  }
}

/**
 * Implementation of hook_perm()
 */
function headjs_perm() {
  return array('administer headjs');
}

/**
 * Implementation of hook_menu()
 */
function headjs_menu() {
  $items = array();

  $items['admin/settings/headjs'] = array(
    'title' => t('Headjs Settings'),
    'description' => t('Configure settings for Headjs module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('headjs_settings'),
    'access arguments' => array('administer headjs'),
  );

  return $items;
}

/**
 * Admin settings form
 */
function headjs_settings() {
  // Clear the javascript cache when the setting is updated
  $form['#submit'][] = 'drupal_clear_js_cache';

  $form['headjs_enable'] = array(
    '#type' => 'checkboxes',
    '#name' => 'headjs_enable',
    '#title' => t('Enable head.js'),
    '#options' => array('enable' => t('Enabled')),
    '#default_value' => variable_get('headjs_enable', array('enable' => 'enable')),
    '#weight' => '-2',
  );
  
  $form['headjs_version'] = array(
    '#type' => 'radios',
    '#title' => t('Choose head.js version'),
    '#options' => array(
      'full' => t('Full version'),
      'loader' => t('Loader only'),
    ),
    '#default_value' => variable_get('headjs_version', 'full'),
    '#weight' => '-1',
  );

  return system_settings_form($form);
}
