<?php
// $Id$

/**
 * @file
 * Overrides Drupal's standard javascript loading methods to use head.js
 */

// filenames of full & loader-only versions
define('HEADJS_FULL', 'head.min.js');
define('HEADJS_LOADER', 'head.load.min.js');

module_load_include('inc', 'headjs', 'headjs.path');

/**
 * Implementation of hook_theme_registry_alter()
 *
 * Make headjs' page preprocess function run after everything else's,
 * so that a theme can't call drupal_get_js() and mess everything up.
 * Also so that if jQuery Update is present it can work normally
 */
function headjs_theme_registry_alter(&$theme_registry) {
  // make sure preprocess function is only added once
  if ($pos = array_search('headjs_preprocess_page', $theme_registry['page']['preprocess functions'])) {
    unset($theme_registry['page']['preprocess functions'][$pos]);
  }
  
  $theme_registry['page']['preprocess functions'][] = 'headjs_preprocess_page';
}

/**
 * Implements hook_preprocess_page()
 *
 * Replace Drupal's javascript includes with head.js version
 */
function headjs_preprocess_page(&$variables) {
  $headjs_enabled = current(variable_get('headjs_enable', array('enable' => 'enable'))) !== 0;

  // Only replace if setting enabled and page has javascript
  if ($headjs_enabled && !empty($variables['scripts'])) {
    list($headscripts, $settings) = _headjs_get_scripts($variables);

    if (variable_get('headjs_hijack_header', TRUE)) {
      // Check for js added via drupal_set_html_head()
      // @see http://drupal.org/node/1029264#comment-3998976
      if (strpos($variables['head'], '<script') !== FALSE) {
        $matches = array();
        preg_match('#<script .+?</script>#s', $variables['head'], $matches);

        foreach ($matches as $match) {
          $matches_scriptname = array();
          if (preg_match('#src="(.+?)"#', $match, $matches_scriptname)) {
            $headscripts[] = $matches_scriptname[1];
            $variables['head'] = str_replace($match, '', $variables['head']);
          }
        }
      }
    }

    if (variable_get('headjs_hijack_closure', TRUE)) {
      // Check for js in closure
      if (strpos($variables['closure'], '<script') !== FALSE) {
        $matches = array();
        preg_match('#<script .+?</script>#s', $variables['closure'], $matches);

        foreach ($matches as $match) {
          $matches_scriptname = array();
          if (preg_match('#src="(.+?)"#', $match, $matches_scriptname)) {
            $headscripts[] = $matches_scriptname[1];
            $variables['closure'] = str_replace($match, '', $variables['closure']);
          }
        }
      }
    }

    // decide which head.js to use; the full script or only the loader  
    $headjs_version = variable_get('headjs_version', 'full');
    $head_script = ($headjs_version === 'full') ? HEADJS_FULL : HEADJS_LOADER;

    // clear js includes & add head.js as the only one
    $scripts = array(
      'core' => array(
        _headjs_path() . $head_script => array(
          'cache' => TRUE,
          'defer' => FALSE,
          'preprocess' => FALSE
        )
      )
    );

    // build head.js function call
    // load scripts in parallel but execute in order
    $headjs = 'head.js("' . implode('", "', $headscripts) . '")';
    
    // In order to make sure settings get set after drupal.js we add them to the head.ready() callback
    if ($settings) {
      // Execute callback on head.ready()
      $headjs .= "\n.ready(function(){" . $settings . "});";
    }
    
    // Make sure head.js is the first and only inline script
    $scripts['inline'] = array(
      array(
        'code' => $headjs,
        'defer' => FALSE
      )
    );
    
    $variables['scripts'] = drupal_get_js('header', $scripts);
  }
}

/**
 * Implementation of hook_perm()
 */
function headjs_perm() {
  return array('administer headjs');
}

/**
 * Implementation of hook_menu()
 */
function headjs_menu() {
  $items = array();

  $items['admin/settings/performance/default'] = array(
    'title' => t('Performance'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'system'),
    'weight' => 0
  );

  $items['admin/settings/performance/headjs'] = array(
    'title' => t('Headjs'),
    'description' => t('Configure settings for Headjs module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('headjs_settings'),
    'access arguments' => array('administer headjs'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 9
  );

  return $items;
}

/**
 * Admin settings form
 */
function headjs_settings() {
  $form = array();

  // Clear the javascript cache when the setting is updated
#  $form['#submit'][] = 'drupal_clear_js_cache';
  $form['#submit'][] = 'cache_clear_all';

  $form['headjs_enable'] = array(
    '#type' => 'checkboxes',
    '#name' => 'headjs_enable',
    '#title' => t('Enable head.js'),
    '#options' => array('enable' => t('Enabled')),
    '#default_value' => variable_get('headjs_enable', array('enable' => 'enable')),
    '#weight' => '-4',
  );
  
  $form['headjs_hijack_header'] = array(
    '#type' => 'checkboxes',
    '#name' => 'headjs_hijack_header',
    '#title' => t('Override scripts added in header'),
    '#options' => array('enable' => t('Enabled')),
    '#default_value' => variable_get('headjs_hijack_header', array('enable' => 'enable')),
    '#weight' => '-3',
  );
  
  $form['headjs_hijack_closure'] = array(
    '#type' => 'checkboxes',
    '#name' => 'headjs_hijack_closure',
    '#title' => t('Override scripts added in closure'),
    '#options' => array('enable' => t('Enabled')),
    '#default_value' => variable_get('headjs_hijack_closure', array('enable' => 'enable')),
    '#weight' => '-2',
  );
  
  $form['headjs_version'] = array(
    '#type' => 'radios',
    '#title' => t('Choose head.js version'),
    '#options' => array(
      'full' => t('Full version'),
      'loader' => t('Loader only'),
    ),
    '#default_value' => variable_get('headjs_version', 'full'),
    '#weight' => '-1',
  );

  return system_settings_form($form);
}

/**
 * Return the version of head.js that is installed.
 *
 * This can be used by other modules' hook_requirements() to ensure that the
 * proper version of head.js is installed.
 *
 * @see version_compare
 */
function headjs_get_version() {
  $version = 0;
  $pattern = '#	Version		([0-9\.a-z]+)#';
  $filename = headjs_get_path();

  // Return the version of head.js installed
  $headjs = file_get_contents($filename);
  if (preg_match($pattern, $headjs, $matches)) {
    $version = $matches[1];
  }

  return $version;
}

/**
 * Convert $variables['scripts'] to an array
 *
 * @param array $variables
 * @return array
 */
function _headjs_get_scripts($variables) {
  $scripts = array();
  $pattern = "!(<script type=\"text\/javascript\" src=\"(.*?))(.*?)(\"(.*?)><\/script>)!";

  // first extract filenames
  if (preg_match_all($pattern, $variables['scripts'], $matches) > 0) {
    foreach ($matches[3] as $m) {
      $scripts[] = $m;
    }
  }
 
  // now extract settings
  $cdata = '<!--//--><![CDATA[//><!--';
  $pos = strpos($variables['scripts'], $cdata);
  $temp = substr($variables['scripts'], $pos);
  $replace = array('<script type="text/javascript">', '</script>', $cdata, '//--><!]]>');
  $settings = (strpos($temp, $cdata) !== FALSE) ? trim(str_replace($replace, '', $temp)) : NULL;

  return array($scripts, $settings);
}
